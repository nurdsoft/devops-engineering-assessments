name: "Terraform Workflow"

on:
  pull_request_target:
    types:
      - opened
      - synchronize
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Validation"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Determine Assignment Directory
        id: assignment-dir
        run: |
          ASSIGNMENT_DIR=$(find assignments/public-cloud/aws -type d -name "*site2site-vpn" | head -n 1)

          if [ -z "$ASSIGNMENT_DIR" ]; then
            echo "Error: Assignment directory not found."
            exit 1
          fi

          echo "ASSIGNMENT_DIR=${ASSIGNMENT_DIR}" >> $GITHUB_ENV
          export ASSIGNMENT_DIR=${ASSIGNMENT_DIR}
          echo "Assignment directory: $ASSIGNMENT_DIR"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Up SSH Key
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Error: SSH_PRIVATE_KEY is not set."
            exit 1
          fi

          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform
          chmod 600 ~/.ssh/terraform
          echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" >> ~/.ssh/config

      - name: Terraform Workflow
        working-directory: ${{ steps.assignment-dir.outputs.ASSIGNMENT_DIR }}
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan || echo "VERIFY_FAILED=true" >> $GITHUB_ENV

      - name: Send Slack Notification
        run: |
          if [ "${VERIFY_FAILED}" = "true" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Terraform Deployment Failed. PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}"}' \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Terraform Deployment Succeeded. PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}"}' \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi
